import { connectToDatabase } from "@/app/lib/mongodb";
import Imovel from "@/app/models/Imovel";
import { NextResponse } from "next/server";

export const dynamic = 'force-dynamic';

export async function GET(request, { params }) {
  const { id } = params;
  const { searchParams } = new URL(request.url);
  const isTrailingSlash = searchParams.get('trailing') === 'true';

  console.log(`üîç [API REDIRECT] ${isTrailingSlash ? 'üîß TRAILING SLASH' : 'üìç NORMAL'} redirect para im√≥vel ${id}`);

  try {
    await connectToDatabase();

    // Buscar o im√≥vel pelo c√≥digo
    const imovel = await Imovel.findOne({ Codigo: id });

    if (!imovel) {
      // Se n√£o encontrar o im√≥vel, redireciona para a p√°gina de busca
      return NextResponse.redirect(new URL('/busca', request.url), 301);
    }

    // Gerar slug baseado no nome do empreendimento
    const slugBasico = imovel.Slug || 
      (imovel.Empreendimento 
        ? imovel.Empreendimento
            .toLowerCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '') // Remove acentos
            .replace(/[^a-z0-9\s-]/g, '') // Remove caracteres especiais
            .replace(/\s+/g, '-') // Substitui espa√ßos por h√≠fens
            .replace(/-+/g, '-') // Remove h√≠fens duplos
            .replace(/^-|-$/g, '') // Remove h√≠fens do in√≠cio e fim
        : `imovel-${id}`);

    // Redirecionar para a URL com slug com status 301 expl√≠cito
    const finalUrl = `/imovel-${id}/${slugBasico}`;
    console.log(`üîç [API REDIRECT] ‚úÖ Redirecionamento DIRETO (301): /imovel-${id}${isTrailingSlash ? '/' : ''} ‚Üí ${finalUrl}`);
    return NextResponse.redirect(new URL(finalUrl, request.url), 301);

  } catch (error) {
    console.error('Erro ao buscar im√≥vel para redirecionamento:', error);
    // Em caso de erro, redireciona para slug gen√©rico com status 301
    return NextResponse.redirect(new URL(`/imovel-${id}/imovel-${id}`, request.url), 301);
  }
}